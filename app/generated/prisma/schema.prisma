// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String
  role          String    @default("user") // "user", "driver", "admin"
  phone         String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  rides    Ride[]    @relation("UserRides")
  driver   Driver?
  accounts Account[]
  sessions Session[]
}

model Driver {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleType  String // "small", "medium", "large"
  vehiclePlate String
  isAvailable  Boolean  @default(true)
  currentLat   Float?
  currentLng   Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  rides Ride[] @relation("DriverRides")
}

model Ride {
  id       String  @id @default(cuid())
  userId   String
  user     User    @relation("UserRides", fields: [userId], references: [id])
  driverId String?
  driver   Driver? @relation("DriverRides", fields: [driverId], references: [id])

  pickupAddress  String
  pickupLat      Float
  pickupLng      Float
  dropoffAddress String
  dropoffLat     Float
  dropoffLng     Float

  status            String // "requested", "accepted", "in_progress", "completed", "cancelled"
  estimatedDistance Float
  estimatedPrice    Float

  furnitureSize    String // "small", "medium", "large"
  furnitureWeight  Float
  furnitureDetails String

  scheduledTime DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
