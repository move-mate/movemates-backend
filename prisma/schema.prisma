// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  deviceInfo  String?  // Store user agent or device identifier
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([token])
}

model TokenBlacklist {
  id        String   @id @default(cuid())
  jti       String   @unique // JWT ID that has been revoked
  reason    String?  // Optional reason for blacklisting
  expiresAt DateTime // When the original token would expire
  createdAt DateTime @default(now())
  
  @@index([jti])
  @@index([expiresAt]) // For cleanup of expired entries
}

model User {
  id            String   @id @default(cuid())
  tokenVersion  Int      @default(0)
  name          String
  email         String   @unique
  emailVerified DateTime?
  passwordHash  String
  role          String   @default("user") // "user", "driver", "admin"
  phone         String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  rides         Ride[]   @relation("UserRides")
  driver        Driver?
  accounts      Account[]
  payments      Payment[]
  refreshTokens RefreshToken[]
}

model Driver {
  id            String   @id @default(cuid())
  name          String
  rating        Float    @default(0)
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleType   String   // "small", "medium", "large"
  vehicleColor  String
  vehiclePlate  String
  isAvailable   Boolean  @default(true)
  currentLat    Float?
  currentLng    Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  rides         Ride[]   @relation("DriverRides")
}

model Ride {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation("UserRides", fields: [userId], references: [id])
  driverId          String?
  driver            Driver?  @relation("DriverRides", fields: [driverId], references: [id])
  
  pickupAddress     String
  pickupLat         Float
  pickupLng         Float
  dropoffAddress    String
  dropoffLat        Float
  dropoffLng        Float
  
  status            String   @default("requested") // "requested", "accepted", "in_progress", "completed", "cancelled"
  estimatedDistance Float
  estimatedPrice    Float
  
  furnitureSize     String   // "small", "medium", "large"
  furnitureWeight   Float
  furnitureDetails  String
  paymentMethodId   String?
  payment           Payment?
  
  scheduledTime     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}


model Payment {
  id              String   @id @default(cuid())
  userId          String
  rideId          String   @unique
  method          String
  amount          Float
  currency        String   @default("ZAR")
  status          String   @default("pending")
  cardLastFour    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])
  ride            Ride     @relation(fields: [rideId], references: [id])

  @@index([userId])
}
